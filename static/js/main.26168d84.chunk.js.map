{"version":3,"sources":["youtube.svg","serviceWorker.js","components/SearchBar.js","components/VideoDetail.js","components/VideoListItem.js","components/VideoList.js","constants.js","api.js","App.js","server.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","SearchBar","onSearchInput","useState","term","setTerm","className","src","youtubeicon","alt","onChange","event","val","target","value","placeholder","VideoDetail","selectedVideo","videoId","id","snippet","title","description","url","VideoListItem","video","setSelectVideo","thumbnails","default","onClick","VideoList","videos","map","key","etag","ROOT_URL","searchYoutube","options","callback","Error","params","part","q","type","axios","get","then","response","data","items","catch","error","console","API_KEY","process","App","setVideos","setSelectedVideo","loading","setLoading","length","createServer","routes","this","timing","searchData","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.26168d84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/youtube.d289251a.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from \"react\";\n\nimport youtubeicon from \"../youtube.svg\";\n\nconst SearchBar = ({ onSearchInput }) => {\n  const [term, setTerm] = useState(\"\");\n\n  const onSearch = (event) => {\n    const val = event.target.value;\n    setTerm(val);\n    onSearchInput(term);\n  };\n\n  return (\n    <div className=\"search-bar\">\n      <div className=\"image-container\">\n        <img src={youtubeicon} alt=\"youtube-icon\" />\n      </div>\n      <div className=\"input-container\">\n        <input onChange={onSearch} placeholder={\"Type To Search\"} />\n      </div>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst VideoDetail = ({ selectedVideo }) => {\n  const {\n    id: { videoId },\n    snippet: { title, description },\n  } = selectedVideo;\n  const url = `https://www.youtube.com/embed/${videoId}`;\n\n  return (\n    <div className=\"video-detail\">\n      <div className=\"video-frame\">\n        <iframe src={url} title={videoId}></iframe>\n      </div>\n      <div className=\"video-desc\">{title}</div>\n      <div className=\"video-desc\">{description}</div>\n    </div>\n  );\n};\n\nexport default VideoDetail;\n","import React from \"react\";\n\nconst VideoListItem = ({ video, setSelectVideo }) => {\n  const {\n    snippet: {\n      thumbnails: {\n        default: { url },\n      },\n      title,\n    },\n  } = video;\n\n  return (\n    <li\n      className=\"video-list-item grouping\"\n      onClick={() => setSelectVideo(video)}\n    >\n      <div className=\"thumbnail float-left\">\n        <img src={url} alt=\"thumbnail\" />\n      </div>\n      <div className=\"video-name float-right video-desc\">{title}</div>\n    </li>\n  );\n};\n\nexport default VideoListItem;\n","import React from \"react\";\nimport VideoListItem from \"./VideoListItem\";\n\nconst VideoList = ({ setSelectVideo, videos }) => (\n  <div className=\"video-list\">\n    <ul>\n      {videos.map((video) => (\n        <VideoListItem\n          video={video}\n          key={video.etag}\n          setSelectVideo={setSelectVideo}\n        />\n      ))}\n    </ul>\n  </div>\n);\n\nexport default VideoList;\n","// YOUTUBE search v3 api\nexport const ROOT_URL = \"https://www.googleapis.com/youtube/v3/search\";\n","import { ROOT_URL } from \"./constants\";\nimport axios from \"axios\";\n\nconst searchYoutube = (options, callback) => {\n  if (!options.key) {\n    throw new Error(\"Youtube Search expected key, received undefined\");\n  }\n\n  const params = {\n    part: \"snippet\",\n    key: options.key,\n    q: options.term,\n    type: \"video\",\n  };\n\n  axios\n    .get(ROOT_URL, { params: params })\n    .then(function (response) {\n      if (callback) {\n        callback(response.data.items);\n      }\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n};\n\nexport default searchYoutube;\n","import \"./App.css\";\n\nimport React, { useState } from \"react\";\n\nimport SearchBar from \"./components/SearchBar\";\nimport VideoDetail from \"./components/VideoDetail\";\nimport VideoList from \"./components/VideoList\";\nimport searchYoutube from \"./api\";\n\n/**\n * Youtube search apikey\n * @type {String}\n */\n// eslint-disable-next-line no-undef\nconst API_KEY = `${process.env.REACT_APP_YOUTUBE_API_KEY}`;\n\nconst App = () => {\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const onSearchInput = (term) => {\n    setLoading(true);\n    searchYoutube({ key: API_KEY, term: term }, (data) => {\n      setLoading(false);\n      setVideos(data);\n      setSelectedVideo(data[0]);\n    });\n  };\n\n  return (\n    <div className=\"container-main\">\n      <SearchBar onSearchInput={onSearchInput} />\n      {videos.length > 0 && !loading && (\n        <div className=\"wrapper grouping\">\n          {selectedVideo && <VideoDetail selectedVideo={selectedVideo} />}\n          <VideoList videos={videos} setSelectVideo={setSelectedVideo} />\n        </div>\n      )}\n      {loading && <div className=\"loader\">Loading...</div>}\n    </div>\n  );\n};\n\nexport default App;\n","import { ROOT_URL } from \"./constants\";\n// src/server.js\nimport { createServer } from \"miragejs\";\nimport searchData from \"./mock-youtube.json\";\n\nexport default function () {\n  createServer({\n    routes() {\n      this.timing = 1000;\n\n      this.get(ROOT_URL, () => searchData);\n    },\n  });\n}\n","import \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport makeServer from \"./server\";\n\nmakeServer();\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}