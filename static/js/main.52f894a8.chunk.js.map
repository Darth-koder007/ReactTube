{"version":3,"sources":["serviceWorker.js","components/SearchBar.js","components/VideoDetail.js","components/VideoListItem.js","components/VideoList.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBar","onSearchInput","useState","term","setTerm","className","onChange","event","val","target","value","VideoDetail","selectedVideo","videoId","id","snippet","title","description","url","src","VideoListItem","video","setSelectVideo","thumbnails","default","onClick","alt","VideoList","videos","map","key","etag","App","setVideos","setSelectedVideo","YTSearch","data","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCASC,EAhBG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACfC,mBAAS,IADM,mBAChCC,EADgC,KAC1BC,EAD0B,KASvC,OACE,yBAAKC,UAAU,cACb,2BAAOC,SARM,SAACC,GAChB,IAAIC,EAAMD,EAAME,OAAOC,MACvBN,EAAQI,GACRP,EAAcE,QCYHQ,EAlBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEbC,EAEJD,EAFFE,GAAMD,QAFiC,EAIrCD,EADFG,QAAWC,EAH4B,EAG5BA,MAAOC,EAHqB,EAGrBA,YAEdC,EAAG,wCAAoCL,GAE7C,OACE,yBAAKR,UAAU,gBACb,yBAAKA,UAAU,eACb,4BAAQc,IAAKD,EAAKF,MAAOH,KAE3B,yBAAKR,UAAU,cAAcW,GAC7B,yBAAKX,UAAU,cAAcY,KCOpBG,EApBO,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,eAAqB,EAQ/CD,EANFN,QAEeG,EAJkC,EAG/CK,WACEC,QAAWN,IAEbF,EAN+C,EAM/CA,MAIJ,OACE,wBAAIX,UAAU,2BAA2BoB,QAASH,GAChD,yBAAKjB,UAAU,wBACb,yBAAKc,IAAKD,EAAKQ,IAAI,eAErB,yBAAKrB,UAAU,qCAAqCW,KCA3CW,EAdG,SAAC,GAAD,IAAGL,EAAH,EAAGA,eAAgBM,EAAnB,EAAmBA,OAAnB,OAChB,yBAAKvB,UAAU,cACb,4BACGuB,EAAOC,KAAI,SAACR,GAAD,OACV,kBAAC,EAAD,CACEA,MAAOA,EACPS,IAAKT,EAAMU,KACXT,eAAgBA,U,gBC+BXU,EA1BH,WAAO,IAAD,EACY9B,mBAAS,IADrB,mBACT0B,EADS,KACDK,EADC,OAE0B/B,mBAAS,MAFnC,mBAETU,EAFS,KAEMsB,EAFN,KAWhB,OACE,yBAAK7B,UAAU,kBACb,kBAAC,EAAD,CAAWJ,cATO,SAACE,GACrBgC,IAAS,CAAEL,IAPC,wBAOa3B,KAAMA,IAAQ,SAACiC,GACtCH,EAAUG,GACVF,EAAiBE,EAAK,UAOrBR,EAAOS,OAAS,EACf,yBAAKhC,UAAU,oBACZO,GAAiB,kBAAC,EAAD,CAAaA,cAAeA,IAC9C,kBAAC,EAAD,CAAWgB,OAAQA,EAAQN,eAAgBY,KAG7C,yBAAK7B,UAAU,UAAf,gB,cC3BRiC,EAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.52f894a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from \"react\";\n\nconst SearchBar = ({ onSearchInput }) => {\n  const [term, setTerm] = useState(\"\");\n\n  const onSearch = (event) => {\n    let val = event.target.value;\n    setTerm(val);\n    onSearchInput(term);\n  };\n\n  return (\n    <div className=\"search-bar\">\n      <input onChange={onSearch} />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst VideoDetail = ({ selectedVideo }) => {\n  const {\n    id: { videoId },\n    snippet: { title, description },\n  } = selectedVideo;\n  const url = `https://www.youtube.com/embed/${videoId}`;\n\n  return (\n    <div className=\"video-detail\">\n      <div className=\"video-frame\">\n        <iframe src={url} title={videoId}></iframe>\n      </div>\n      <div className=\"video-desc\">{title}</div>\n      <div className=\"video-desc\">{description}</div>\n    </div>\n  );\n};\n\nexport default VideoDetail;\n","import React from \"react\";\n\nconst VideoListItem = ({ video, setSelectVideo }) => {\n  const {\n    snippet: {\n      thumbnails: {\n        default: { url },\n      },\n      title,\n    },\n  } = video;\n\n  return (\n    <li className=\"video-list-item grouping\" onClick={setSelectVideo}>\n      <div className=\"thumbnail float-left\">\n        <img src={url} alt=\"thumbnail\" />\n      </div>\n      <div className=\"video-name float-right video-desc\">{title}</div>\n    </li>\n  );\n};\n\nexport default VideoListItem;\n","import React from \"react\";\nimport VideoListItem from \"./VideoListItem\";\n\nconst VideoList = ({ setSelectVideo, videos }) => (\n  <div className=\"video-list\">\n    <ul>\n      {videos.map((video) => (\n        <VideoListItem\n          video={video}\n          key={video.etag}\n          setSelectVideo={setSelectVideo}\n        />\n      ))}\n    </ul>\n  </div>\n);\n\nexport default VideoList;\n","import \"./App.css\";\n\nimport React, { useState } from \"react\";\n\nimport SearchBar from \"./components/SearchBar\";\nimport VideoDetail from \"./components/VideoDetail\";\nimport VideoList from \"./components/VideoList\";\nimport YTSearch from \"youtube-api-search\";\n\n/**\n * Youtube search apikey\n * @type {String}\n */\nconst API_KEY = \"--YOUR-API-KEY-HERE--\";\n\nconst App = () => {\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n\n  const searchYoutube = (term) => {\n    YTSearch({ key: API_KEY, term: term }, (data) => {\n      setVideos(data);\n      setSelectedVideo(data[0]);\n    });\n  };\n\n  return (\n    <div className=\"container-main\">\n      <SearchBar onSearchInput={searchYoutube} />\n      {videos.length > 0 ? (\n        <div className=\"wrapper grouping\">\n          {selectedVideo && <VideoDetail selectedVideo={selectedVideo} />}\n          <VideoList videos={videos} setSelectVideo={setSelectedVideo} />\n        </div>\n      ) : (\n        <div className=\"loader\">Loading...</div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}